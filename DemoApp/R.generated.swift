//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import RswiftResources
import UIKit

private class BundleFinder {}
let R = _R(bundle: Bundle(for: BundleFinder.self))

struct _R {
  let bundle: Foundation.Bundle

  let entitlements = entitlements()
  let segue = segue()
  let reuseIdentifier = reuseIdentifier()

  var string: string { .init(bundle: bundle, preferredLanguages: nil, locale: nil) }
  var color: color { .init(bundle: bundle) }
  var image: image { .init(bundle: bundle) }
  var info: info { .init(bundle: bundle) }
  var font: font { .init(bundle: bundle) }
  var file: file { .init(bundle: bundle) }
  var nib: nib { .init(bundle: bundle) }
  var storyboard: storyboard { .init(bundle: bundle) }

  func string(bundle: Foundation.Bundle) -> string {
    .init(bundle: bundle, preferredLanguages: nil, locale: nil)
  }
  func string(locale: Foundation.Locale) -> string {
    .init(bundle: bundle, preferredLanguages: nil, locale: locale)
  }
  func string(preferredLanguages: [String], locale: Locale? = nil) -> string {
    .init(bundle: bundle, preferredLanguages: preferredLanguages, locale: locale)
  }
  func color(bundle: Foundation.Bundle) -> color {
    .init(bundle: bundle)
  }
  func image(bundle: Foundation.Bundle) -> image {
    .init(bundle: bundle)
  }
  func info(bundle: Foundation.Bundle) -> info {
    .init(bundle: bundle)
  }
  func font(bundle: Foundation.Bundle) -> font {
    .init(bundle: bundle)
  }
  func file(bundle: Foundation.Bundle) -> file {
    .init(bundle: bundle)
  }
  func nib(bundle: Foundation.Bundle) -> nib {
    .init(bundle: bundle)
  }
  func storyboard(bundle: Foundation.Bundle) -> storyboard {
    .init(bundle: bundle)
  }
  func validate() throws {
    try self.font.validate()
    try self.nib.validate()
    try self.storyboard.validate()
  }

  struct project {
    let developmentRegion = "en"
  }

  /// This `_R.string` struct is generated, and contains static references to 1 localization tables.
  struct string {
    let bundle: Foundation.Bundle
    let preferredLanguages: [String]?
    let locale: Locale?
    var localizable: localizable { .init(source: .init(bundle: bundle, tableName: "Localizable", preferredLanguages: preferredLanguages, locale: locale)) }

    func localizable(preferredLanguages: [String]) -> localizable {
      .init(source: .init(bundle: bundle, tableName: "Localizable", preferredLanguages: preferredLanguages, locale: locale))
    }


    /// This `_R.string.localizable` struct is generated, and contains static references to 1 localization keys.
    struct localizable {
      let source: RswiftResources.StringResource.Source

      /// Value: DemoApp
      ///
      /// Key: appName
      var appName: RswiftResources.StringResource { .init(key: "appName", tableName: "Localizable", source: source, developmentValue: nil, comment: nil) }
    }
  }

  /// This `_R.color` struct is generated, and contains static references to 3 colors.
  struct color {
    let bundle: Foundation.Bundle

    /// Color `AccentColor`.
    var accentColor: RswiftResources.ColorResource { .init(name: "AccentColor", path: [], bundle: bundle) }

    /// Color `appBlack`.
    var appBlack: RswiftResources.ColorResource { .init(name: "appBlack", path: [], bundle: bundle) }

    /// Color `appWhite`.
    var appWhite: RswiftResources.ColorResource { .init(name: "appWhite", path: [], bundle: bundle) }
  }

  /// This `_R.image` struct is generated, and contains static references to 36 images.
  struct image {
    let bundle: Foundation.Bundle

    /// Image `FacebookIcon`.
    var facebookIcon: RswiftResources.ImageResource { .init(name: "FacebookIcon", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `GoogleIcon`.
    var googleIcon: RswiftResources.ImageResource { .init(name: "GoogleIcon", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `LogInWithFacebook`.
    var logInWithFacebook: RswiftResources.ImageResource { .init(name: "LogInWithFacebook", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `LogInWithGoogle`.
    var logInWithGoogle: RswiftResources.ImageResource { .init(name: "LogInWithGoogle", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `agentsOfShield`.
    var agentsOfShield: RswiftResources.ImageResource { .init(name: "agentsOfShield", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `blindspot`.
    var blindspot: RswiftResources.ImageResource { .init(name: "blindspot", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `boldType`.
    var boldType: RswiftResources.ImageResource { .init(name: "boldType", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `crowns`.
    var crowns: RswiftResources.ImageResource { .init(name: "crowns", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `dcLegendsOfTomorrow`.
    var dcLegendsOfTomorrow: RswiftResources.ImageResource { .init(name: "dcLegendsOfTomorrow", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `defaultPerson`.
    var defaultPerson: RswiftResources.ImageResource { .init(name: "defaultPerson", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `doomPatrol`.
    var doomPatrol: RswiftResources.ImageResource { .init(name: "doomPatrol", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `emptyPot`.
    var emptyPot: RswiftResources.ImageResource { .init(name: "emptyPot", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `fullPot`.
    var fullPot: RswiftResources.ImageResource { .init(name: "fullPot", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `golfScreenBg`.
    var golfScreenBg: RswiftResources.ImageResource { .init(name: "golfScreenBg", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `gps`.
    var gps: RswiftResources.ImageResource { .init(name: "gps", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `halfFill`.
    var halfFill: RswiftResources.ImageResource { .init(name: "halfFill", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `hightown`.
    var hightown: RswiftResources.ImageResource { .init(name: "hightown", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `iconsCard`.
    var iconsCard: RswiftResources.ImageResource { .init(name: "iconsCard", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `iconsIllustrationClosestToPin`.
    var iconsIllustrationClosestToPin: RswiftResources.ImageResource { .init(name: "iconsIllustrationClosestToPin", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `iconsIllustrationGolfPoker`.
    var iconsIllustrationGolfPoker: RswiftResources.ImageResource { .init(name: "iconsIllustrationGolfPoker", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `iconsIllustrationSkins`.
    var iconsIllustrationSkins: RswiftResources.ImageResource { .init(name: "iconsIllustrationSkins", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `iconsMessage`.
    var iconsMessage: RswiftResources.ImageResource { .init(name: "iconsMessage", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `inTheDark`.
    var inTheDark: RswiftResources.ImageResource { .init(name: "inTheDark", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `locker`.
    var locker: RswiftResources.ImageResource { .init(name: "locker", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `lockerOpened`.
    var lockerOpened: RswiftResources.ImageResource { .init(name: "lockerOpened", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ottLogo`.
    var ottLogo: RswiftResources.ImageResource { .init(name: "ottLogo", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `pennyDreadful`.
    var pennyDreadful: RswiftResources.ImageResource { .init(name: "pennyDreadful", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `person`.
    var person: RswiftResources.ImageResource { .init(name: "person", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `placeholder`.
    var placeholder: RswiftResources.ImageResource { .init(name: "placeholder", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `playingCards`.
    var playingCards: RswiftResources.ImageResource { .init(name: "playingCards", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `siren`.
    var siren: RswiftResources.ImageResource { .init(name: "siren", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `theHundred`.
    var theHundred: RswiftResources.ImageResource { .init(name: "theHundred", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `threeDots`.
    var threeDots: RswiftResources.ImageResource { .init(name: "threeDots", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `trending-0`.
    var trending0: RswiftResources.ImageResource { .init(name: "trending-0", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `trending-1`.
    var trending1: RswiftResources.ImageResource { .init(name: "trending-1", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `trending-2`.
    var trending2: RswiftResources.ImageResource { .init(name: "trending-2", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }
  }

  /// This `_R.info` struct is generated, and contains static references to 1 properties.
  struct info {
    let bundle: Foundation.Bundle
    var uiApplicationSceneManifest: uiApplicationSceneManifest { .init(bundle: bundle) }

    func uiApplicationSceneManifest(bundle: Foundation.Bundle) -> uiApplicationSceneManifest {
      .init(bundle: bundle)
    }

    struct uiApplicationSceneManifest {
      let bundle: Foundation.Bundle

      let uiApplicationSupportsMultipleScenes: Bool = false

      var _key: String { bundle.infoDictionaryString(path: ["UIApplicationSceneManifest"], key: "_key") ?? "UIApplicationSceneManifest" }
      var uiSceneConfigurations: uiSceneConfigurations { .init(bundle: bundle) }

      func uiSceneConfigurations(bundle: Foundation.Bundle) -> uiSceneConfigurations {
        .init(bundle: bundle)
      }

      struct uiSceneConfigurations {
        let bundle: Foundation.Bundle
        var _key: String { bundle.infoDictionaryString(path: ["UIApplicationSceneManifest", "UISceneConfigurations"], key: "_key") ?? "UISceneConfigurations" }
        var uiWindowSceneSessionRoleApplication: uiWindowSceneSessionRoleApplication { .init(bundle: bundle) }

        func uiWindowSceneSessionRoleApplication(bundle: Foundation.Bundle) -> uiWindowSceneSessionRoleApplication {
          .init(bundle: bundle)
        }

        struct uiWindowSceneSessionRoleApplication {
          let bundle: Foundation.Bundle
          var defaultConfiguration: defaultConfiguration { .init(bundle: bundle) }

          func defaultConfiguration(bundle: Foundation.Bundle) -> defaultConfiguration {
            .init(bundle: bundle)
          }

          struct defaultConfiguration {
            let bundle: Foundation.Bundle
            var uiSceneConfigurationName: String { bundle.infoDictionaryString(path: ["UIApplicationSceneManifest", "UISceneConfigurations", "UIWindowSceneSessionRoleApplication"], key: "UISceneConfigurationName") ?? "Default Configuration" }
            var uiSceneDelegateClassName: String { bundle.infoDictionaryString(path: ["UIApplicationSceneManifest", "UISceneConfigurations", "UIWindowSceneSessionRoleApplication"], key: "UISceneDelegateClassName") ?? "$(PRODUCT_MODULE_NAME).SceneDelegate" }
            var uiSceneStoryboardFile: String { bundle.infoDictionaryString(path: ["UIApplicationSceneManifest", "UISceneConfigurations", "UIWindowSceneSessionRoleApplication"], key: "UISceneStoryboardFile") ?? "Main" }
          }
        }
      }
    }
  }

  /// This `_R.entitlements` struct is generated, and contains static references to 1 properties.
  struct entitlements {
    let keychainAccessGroups = keychainAccessGroups()
    struct keychainAccessGroups {
    }
  }

  /// This `_R.font` struct is generated, and contains static references to 4 fonts.
  struct font: Sequence {
    let bundle: Foundation.Bundle

    /// Font `Roboto-Bold`.
    var robotoBold: RswiftResources.FontResource { .init(name: "Roboto-Bold", bundle: bundle, filename: "Roboto-Bold.ttf") }

    /// Font `Roboto-Italic`.
    var robotoItalic: RswiftResources.FontResource { .init(name: "Roboto-Italic", bundle: bundle, filename: "Roboto-Italic.ttf") }

    /// Font `Roboto-Light`.
    var robotoLight: RswiftResources.FontResource { .init(name: "Roboto-Light", bundle: bundle, filename: "Roboto-Light.ttf") }

    /// Font `Roboto-Regular`.
    var robotoRegular: RswiftResources.FontResource { .init(name: "Roboto-Regular", bundle: bundle, filename: "Roboto-Regular.ttf") }

    func makeIterator() -> IndexingIterator<[RswiftResources.FontResource]> {
      [robotoBold, robotoItalic, robotoLight, robotoRegular].makeIterator()
    }
    func validate() throws {
      for font in self {
        if !font.canBeLoaded() { throw RswiftResources.ValidationError("[R.swift] Font '\(font.name)' could not be loaded, is '\(font.filename)' added to the UIAppFonts array in this targets Info.plist?") }
      }
    }
  }

  /// This `_R.file` struct is generated, and contains static references to 5 resource files.
  struct file {
    let bundle: Foundation.Bundle

    /// Resource file `Roboto-Bold.ttf`.
    var robotoBoldTtf: RswiftResources.FileResource { .init(name: "Roboto-Bold", pathExtension: "ttf", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `Roboto-Italic.ttf`.
    var robotoItalicTtf: RswiftResources.FileResource { .init(name: "Roboto-Italic", pathExtension: "ttf", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `Roboto-Light.ttf`.
    var robotoLightTtf: RswiftResources.FileResource { .init(name: "Roboto-Light", pathExtension: "ttf", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `Roboto-Regular.ttf`.
    var robotoRegularTtf: RswiftResources.FileResource { .init(name: "Roboto-Regular", pathExtension: "ttf", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `wkwebview.pdf`.
    var wkwebviewPdf: RswiftResources.FileResource { .init(name: "wkwebview", pathExtension: "pdf", bundle: bundle, locale: LocaleReference.none) }
  }

  /// This `_R.segue` struct is generated, and contains static references to 1 view controllers.
  struct segue {
    let containerViewController = containerViewController()

    /// This struct is generated for `ContainerViewController`, and contains static references to 1 segues.
    struct containerViewController {

      /// Segue identifier `pageViewControllerSegue`.
      var pageViewControllerSegue: RswiftResources.SegueIdentifier<UIKit.UIStoryboardSegue, ContainerViewController, MainPageViewController> { .init(identifier: "pageViewControllerSegue") }
    }
  }

  /// This `_R.nib` struct is generated, and contains static references to 17 nibs.
  struct nib {
    let bundle: Foundation.Bundle

    /// Nib `ExploreUsersTVCell`.
    var exploreUsersTVCell: RswiftResources.NibReferenceReuseIdentifier<ExploreUsersTVCell, ExploreUsersTVCell> { .init(name: "ExploreUsersTVCell", bundle: bundle, identifier: "ExploreUsersTVCell") }

    /// Nib `FormTextField`.
    var formTextField: RswiftResources.NibReference<UIKit.UIView> { .init(name: "FormTextField", bundle: bundle) }

    /// Nib `FriendTableViewCell`.
    var friendTableViewCell: RswiftResources.NibReferenceReuseIdentifier<FriendTableViewCell, FriendTableViewCell> { .init(name: "FriendTableViewCell", bundle: bundle, identifier: "FriendTableViewCell") }

    /// Nib `GameStatusView`.
    var gameStatusView: RswiftResources.NibReference<UIKit.UIView> { .init(name: "GameStatusView", bundle: bundle) }

    /// Nib `GolfGameTypeView`.
    var golfGameTypeView: RswiftResources.NibReference<UIKit.UIView> { .init(name: "GolfGameTypeView", bundle: bundle) }

    /// Nib `GolfHomeHeaderView`.
    var golfHomeHeaderView: RswiftResources.NibReference<UIKit.UIView> { .init(name: "GolfHomeHeaderView", bundle: bundle) }

    /// Nib `GroupHeaderView`.
    var groupHeaderView: RswiftResources.NibReference<GroupHeaderView> { .init(name: "GroupHeaderView", bundle: bundle) }

    /// Nib `IndexTableViewCell`.
    var indexTableViewCell: RswiftResources.NibReferenceReuseIdentifier<IndexTableViewCell, IndexTableViewCell> { .init(name: "IndexTableViewCell", bundle: bundle, identifier: "IndexTableViewCell") }

    /// Nib `MovieCVCell`.
    var movieCVCell: RswiftResources.NibReferenceReuseIdentifier<MovieCVCell, MovieCVCell> { .init(name: "MovieCVCell", bundle: bundle, identifier: "MovieCVCell") }

    /// Nib `MovieCatalogTVCell`.
    var movieCatalogTVCell: RswiftResources.NibReferenceReuseIdentifier<MovieCatalogTVCell, MovieCatalogTVCell> { .init(name: "MovieCatalogTVCell", bundle: bundle, identifier: "MovieCatalogTVCell") }

    /// Nib `MovieHeaderCVCell`.
    var movieHeaderCVCell: RswiftResources.NibReferenceReuseIdentifier<MovieHeaderCVCell, MovieHeaderCVCell> { .init(name: "MovieHeaderCVCell", bundle: bundle, identifier: "MovieHeaderCVCell") }

    /// Nib `MovieHeaderView`.
    var movieHeaderView: RswiftResources.NibReference<UIKit.UIView> { .init(name: "MovieHeaderView", bundle: bundle) }

    /// Nib `Multiple5TableViewCell`.
    var multiple5TableViewCell: RswiftResources.NibReferenceReuseIdentifier<Multiple5TableViewCell, Multiple5TableViewCell> { .init(name: "Multiple5TableViewCell", bundle: bundle, identifier: "Multiple5TableViewCell") }

    /// Nib `PlayerTVCell`.
    var playerTVCell: RswiftResources.NibReferenceReuseIdentifier<PlayerTVCell, PlayerTVCell> { .init(name: "PlayerTVCell", bundle: bundle, identifier: "PlayerTVCell") }

    /// Nib `ProductTVCell`.
    var productTVCell: RswiftResources.NibReferenceReuseIdentifier<ProductTVCell, ProductTVCell> { .init(name: "ProductTVCell", bundle: bundle, identifier: "ProductTVCell") }

    /// Nib `RSSFeedTVCell`.
    var rssFeedTVCell: RswiftResources.NibReferenceReuseIdentifier<RSSFeedTVCell, RSSFeedTVCell> { .init(name: "RSSFeedTVCell", bundle: bundle, identifier: "RSSFeedTVCell") }

    /// Nib `SectionHeaderView`.
    var sectionHeaderView: RswiftResources.NibReference<SectionHeaderView> { .init(name: "SectionHeaderView", bundle: bundle) }

    func validate() throws {
      if UIKit.UIImage(named: "playingCards", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'playingCards' is used in nib 'GameStatusView', but couldn't be loaded.") }
      if UIKit.UIImage(named: "iconsIllustrationGolfPoker", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'iconsIllustrationGolfPoker' is used in nib 'GolfGameTypeView', but couldn't be loaded.") }
      if UIKit.UIImage(named: "fullPot", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'fullPot' is used in nib 'GolfHomeHeaderView', but couldn't be loaded.") }
      if UIKit.UIImage(named: "iconsCard", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'iconsCard' is used in nib 'GolfHomeHeaderView', but couldn't be loaded.") }
      if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "plus") == nil { throw RswiftResources.ValidationError("[R.swift] System image named 'plus' is used in nib 'GolfHomeHeaderView', but couldn't be loaded.") } }
      if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "eye") == nil { throw RswiftResources.ValidationError("[R.swift] System image named 'eye' is used in nib 'GroupHeaderView', but couldn't be loaded.") } }
      if UIKit.UIImage(named: "iconsMessage", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'iconsMessage' is used in nib 'GroupHeaderView', but couldn't be loaded.") }
      if UIKit.UIImage(named: "dcLegendsOfTomorrow", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'dcLegendsOfTomorrow' is used in nib 'MovieHeaderCVCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "iconsMessage", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'iconsMessage' is used in nib 'PlayerTVCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "crowns", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'crowns' is used in nib 'ProductTVCell', but couldn't be loaded.") }
    }
  }

  /// This `_R.reuseIdentifier` struct is generated, and contains static references to 13 reuse identifiers.
  struct reuseIdentifier {

    /// Reuse identifier `ExploreUsersTVCell`.
    let exploreUsersTVCell: RswiftResources.ReuseIdentifier<ExploreUsersTVCell> = .init(identifier: "ExploreUsersTVCell")

    /// Reuse identifier `FriendTableViewCell`.
    let friendTableViewCell: RswiftResources.ReuseIdentifier<FriendTableViewCell> = .init(identifier: "FriendTableViewCell")

    /// Reuse identifier `IndexTableViewCell`.
    let indexTableViewCell: RswiftResources.ReuseIdentifier<IndexTableViewCell> = .init(identifier: "IndexTableViewCell")

    /// Reuse identifier `MovieCVCell`.
    let movieCVCell: RswiftResources.ReuseIdentifier<MovieCVCell> = .init(identifier: "MovieCVCell")

    /// Reuse identifier `MovieCatalogTVCell`.
    let movieCatalogTVCell: RswiftResources.ReuseIdentifier<MovieCatalogTVCell> = .init(identifier: "MovieCatalogTVCell")

    /// Reuse identifier `MovieCollectionViewCell`.
    let movieCollectionViewCell: RswiftResources.ReuseIdentifier<MovieCollectionViewCell> = .init(identifier: "MovieCollectionViewCell")

    /// Reuse identifier `MovieHeaderCVCell`.
    let movieHeaderCVCell: RswiftResources.ReuseIdentifier<MovieHeaderCVCell> = .init(identifier: "MovieHeaderCVCell")

    /// Reuse identifier `MovieListingTVCell`.
    let movieListingTVCell: RswiftResources.ReuseIdentifier<MovieListingTVCell> = .init(identifier: "MovieListingTVCell")

    /// Reuse identifier `Multiple5TableViewCell`.
    let multiple5TableViewCell: RswiftResources.ReuseIdentifier<Multiple5TableViewCell> = .init(identifier: "Multiple5TableViewCell")

    /// Reuse identifier `NavigationTVCell`.
    let navigationTVCell: RswiftResources.ReuseIdentifier<NavigationTVCell> = .init(identifier: "NavigationTVCell")

    /// Reuse identifier `PlayerTVCell`.
    let playerTVCell: RswiftResources.ReuseIdentifier<PlayerTVCell> = .init(identifier: "PlayerTVCell")

    /// Reuse identifier `ProductTVCell`.
    let productTVCell: RswiftResources.ReuseIdentifier<ProductTVCell> = .init(identifier: "ProductTVCell")

    /// Reuse identifier `RSSFeedTVCell`.
    let rssFeedTVCell: RswiftResources.ReuseIdentifier<RSSFeedTVCell> = .init(identifier: "RSSFeedTVCell")
  }

  /// This `_R.storyboard` struct is generated, and contains static references to 31 storyboards.
  struct storyboard {
    let bundle: Foundation.Bundle
    var activityIndicator: activityIndicator { .init(bundle: bundle) }
    var autolayoutExercise: autolayoutExercise { .init(bundle: bundle) }
    var collectionView: collectionView { .init(bundle: bundle) }
    var golfScreens: golfScreens { .init(bundle: bundle) }
    var imageView: imageView { .init(bundle: bundle) }
    var launchScreen: launchScreen { .init(bundle: bundle) }
    var main: main { .init(bundle: bundle) }
    var mkMapView: mkMapView { .init(bundle: bundle) }
    var ottScreen: ottScreen { .init(bundle: bundle) }
    var scrollView: scrollView { .init(bundle: bundle) }
    var searchBar: searchBar { .init(bundle: bundle) }
    var stackView: stackView { .init(bundle: bundle) }
    var tableView: tableView { .init(bundle: bundle) }
    var task1: task1 { .init(bundle: bundle) }
    var uiButton: uiButton { .init(bundle: bundle) }
    var uiDatePicker: uiDatePicker { .init(bundle: bundle) }
    var uiLabel: uiLabel { .init(bundle: bundle) }
    var uiNavigation: uiNavigation { .init(bundle: bundle) }
    var uiPageViewController: uiPageViewController { .init(bundle: bundle) }
    var uiPickerView: uiPickerView { .init(bundle: bundle) }
    var uiProgressView: uiProgressView { .init(bundle: bundle) }
    var uiSegmentedControl: uiSegmentedControl { .init(bundle: bundle) }
    var uiSlider: uiSlider { .init(bundle: bundle) }
    var uiStepper: uiStepper { .init(bundle: bundle) }
    var uiSwitch: uiSwitch { .init(bundle: bundle) }
    var uiTabBar: uiTabBar { .init(bundle: bundle) }
    var uiTextField: uiTextField { .init(bundle: bundle) }
    var uiTextView: uiTextView { .init(bundle: bundle) }
    var uiToolBar: uiToolBar { .init(bundle: bundle) }
    var webServices: webServices { .init(bundle: bundle) }
    var wkWebView: wkWebView { .init(bundle: bundle) }

    func activityIndicator(bundle: Foundation.Bundle) -> activityIndicator {
      .init(bundle: bundle)
    }
    func autolayoutExercise(bundle: Foundation.Bundle) -> autolayoutExercise {
      .init(bundle: bundle)
    }
    func collectionView(bundle: Foundation.Bundle) -> collectionView {
      .init(bundle: bundle)
    }
    func golfScreens(bundle: Foundation.Bundle) -> golfScreens {
      .init(bundle: bundle)
    }
    func imageView(bundle: Foundation.Bundle) -> imageView {
      .init(bundle: bundle)
    }
    func launchScreen(bundle: Foundation.Bundle) -> launchScreen {
      .init(bundle: bundle)
    }
    func main(bundle: Foundation.Bundle) -> main {
      .init(bundle: bundle)
    }
    func mkMapView(bundle: Foundation.Bundle) -> mkMapView {
      .init(bundle: bundle)
    }
    func ottScreen(bundle: Foundation.Bundle) -> ottScreen {
      .init(bundle: bundle)
    }
    func scrollView(bundle: Foundation.Bundle) -> scrollView {
      .init(bundle: bundle)
    }
    func searchBar(bundle: Foundation.Bundle) -> searchBar {
      .init(bundle: bundle)
    }
    func stackView(bundle: Foundation.Bundle) -> stackView {
      .init(bundle: bundle)
    }
    func tableView(bundle: Foundation.Bundle) -> tableView {
      .init(bundle: bundle)
    }
    func task1(bundle: Foundation.Bundle) -> task1 {
      .init(bundle: bundle)
    }
    func uiButton(bundle: Foundation.Bundle) -> uiButton {
      .init(bundle: bundle)
    }
    func uiDatePicker(bundle: Foundation.Bundle) -> uiDatePicker {
      .init(bundle: bundle)
    }
    func uiLabel(bundle: Foundation.Bundle) -> uiLabel {
      .init(bundle: bundle)
    }
    func uiNavigation(bundle: Foundation.Bundle) -> uiNavigation {
      .init(bundle: bundle)
    }
    func uiPageViewController(bundle: Foundation.Bundle) -> uiPageViewController {
      .init(bundle: bundle)
    }
    func uiPickerView(bundle: Foundation.Bundle) -> uiPickerView {
      .init(bundle: bundle)
    }
    func uiProgressView(bundle: Foundation.Bundle) -> uiProgressView {
      .init(bundle: bundle)
    }
    func uiSegmentedControl(bundle: Foundation.Bundle) -> uiSegmentedControl {
      .init(bundle: bundle)
    }
    func uiSlider(bundle: Foundation.Bundle) -> uiSlider {
      .init(bundle: bundle)
    }
    func uiStepper(bundle: Foundation.Bundle) -> uiStepper {
      .init(bundle: bundle)
    }
    func uiSwitch(bundle: Foundation.Bundle) -> uiSwitch {
      .init(bundle: bundle)
    }
    func uiTabBar(bundle: Foundation.Bundle) -> uiTabBar {
      .init(bundle: bundle)
    }
    func uiTextField(bundle: Foundation.Bundle) -> uiTextField {
      .init(bundle: bundle)
    }
    func uiTextView(bundle: Foundation.Bundle) -> uiTextView {
      .init(bundle: bundle)
    }
    func uiToolBar(bundle: Foundation.Bundle) -> uiToolBar {
      .init(bundle: bundle)
    }
    func webServices(bundle: Foundation.Bundle) -> webServices {
      .init(bundle: bundle)
    }
    func wkWebView(bundle: Foundation.Bundle) -> wkWebView {
      .init(bundle: bundle)
    }
    func validate() throws {
      try self.activityIndicator.validate()
      try self.autolayoutExercise.validate()
      try self.collectionView.validate()
      try self.golfScreens.validate()
      try self.imageView.validate()
      try self.launchScreen.validate()
      try self.main.validate()
      try self.mkMapView.validate()
      try self.ottScreen.validate()
      try self.scrollView.validate()
      try self.searchBar.validate()
      try self.stackView.validate()
      try self.tableView.validate()
      try self.task1.validate()
      try self.uiButton.validate()
      try self.uiDatePicker.validate()
      try self.uiLabel.validate()
      try self.uiNavigation.validate()
      try self.uiPageViewController.validate()
      try self.uiPickerView.validate()
      try self.uiProgressView.validate()
      try self.uiSegmentedControl.validate()
      try self.uiSlider.validate()
      try self.uiStepper.validate()
      try self.uiSwitch.validate()
      try self.uiTabBar.validate()
      try self.uiTextField.validate()
      try self.uiTextView.validate()
      try self.uiToolBar.validate()
      try self.webServices.validate()
      try self.wkWebView.validate()
    }


    /// Storyboard `ActivityIndicator`.
    struct activityIndicator: RswiftResources.StoryboardReference {
      let bundle: Foundation.Bundle

      let name = "ActivityIndicator"

      var activityIndicatorVC: RswiftResources.StoryboardViewControllerIdentifier<ActivityIndicatorVC> { .init(identifier: "ActivityIndicatorVC", storyboard: name, bundle: bundle) }

      func validate() throws {
        if activityIndicatorVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'activityIndicatorVC' could not be loaded from storyboard 'ActivityIndicator' as 'ActivityIndicatorVC'.") }
      }
    }

    /// Storyboard `AutolayoutExercise`.
    struct autolayoutExercise: RswiftResources.StoryboardReference, RswiftResources.InitialControllerContainer {
      typealias InitialController = SignupVC

      let bundle: Foundation.Bundle

      let name = "AutolayoutExercise"

      var loginVC: RswiftResources.StoryboardViewControllerIdentifier<LoginVC> { .init(identifier: "LoginVC", storyboard: name, bundle: bundle) }
      var signupVC: RswiftResources.StoryboardViewControllerIdentifier<SignupVC> { .init(identifier: "SignupVC", storyboard: name, bundle: bundle) }

      func validate() throws {
        if UIKit.UIImage(named: "FacebookIcon", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'FacebookIcon' is used in storyboard 'AutolayoutExercise', but couldn't be loaded.") }
        if UIKit.UIImage(named: "GoogleIcon", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'GoogleIcon' is used in storyboard 'AutolayoutExercise', but couldn't be loaded.") }
        if UIKit.UIImage(named: "LogInWithFacebook", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'LogInWithFacebook' is used in storyboard 'AutolayoutExercise', but couldn't be loaded.") }
        if UIKit.UIImage(named: "LogInWithGoogle", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'LogInWithGoogle' is used in storyboard 'AutolayoutExercise', but couldn't be loaded.") }
        if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "eye.slash.fill") == nil { throw RswiftResources.ValidationError("[R.swift] System image named 'eye.slash.fill' is used in storyboard 'AutolayoutExercise', but couldn't be loaded.") } }
        if UIKit.UIImage(named: "gps", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'gps' is used in storyboard 'AutolayoutExercise', but couldn't be loaded.") }
        if loginVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'loginVC' could not be loaded from storyboard 'AutolayoutExercise' as 'LoginVC'.") }
        if signupVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'signupVC' could not be loaded from storyboard 'AutolayoutExercise' as 'SignupVC'.") }
      }
    }

    /// Storyboard `CollectionView`.
    struct collectionView: RswiftResources.StoryboardReference {
      let bundle: Foundation.Bundle

      let name = "CollectionView"

      var collectionViewVC: RswiftResources.StoryboardViewControllerIdentifier<CollectionViewVC> { .init(identifier: "CollectionViewVC", storyboard: name, bundle: bundle) }

      func validate() throws {
        if collectionViewVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'collectionViewVC' could not be loaded from storyboard 'CollectionView' as 'CollectionViewVC'.") }
      }
    }

    /// Storyboard `GolfScreens`.
    struct golfScreens: RswiftResources.StoryboardReference, RswiftResources.InitialControllerContainer {
      typealias InitialController = GolfHomeScreenVC

      let bundle: Foundation.Bundle

      let name = "GolfScreens"

      var adjustableTextViewDemoVC: RswiftResources.StoryboardViewControllerIdentifier<AdjustableTextViewDemoVC> { .init(identifier: "AdjustableTextViewDemoVC", storyboard: name, bundle: bundle) }
      var golfHomeScreenVC: RswiftResources.StoryboardViewControllerIdentifier<GolfHomeScreenVC> { .init(identifier: "GolfHomeScreenVC", storyboard: name, bundle: bundle) }

      func validate() throws {
        if UIKit.UIImage(named: "golfScreenBg", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'golfScreenBg' is used in storyboard 'GolfScreens', but couldn't be loaded.") }
        if UIKit.UIImage(named: "threeDots", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'threeDots' is used in storyboard 'GolfScreens', but couldn't be loaded.") }
        if adjustableTextViewDemoVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'adjustableTextViewDemoVC' could not be loaded from storyboard 'GolfScreens' as 'AdjustableTextViewDemoVC'.") }
        if golfHomeScreenVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'golfHomeScreenVC' could not be loaded from storyboard 'GolfScreens' as 'GolfHomeScreenVC'.") }
      }
    }

    /// Storyboard `ImageView`.
    struct imageView: RswiftResources.StoryboardReference {
      let bundle: Foundation.Bundle

      let name = "ImageView"

      var imageViewVC: RswiftResources.StoryboardViewControllerIdentifier<ImageViewVC> { .init(identifier: "ImageViewVC", storyboard: name, bundle: bundle) }

      func validate() throws {
        if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "square.and.arrow.up") == nil { throw RswiftResources.ValidationError("[R.swift] System image named 'square.and.arrow.up' is used in storyboard 'ImageView', but couldn't be loaded.") } }
        if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "square.and.arrow.up.circle") == nil { throw RswiftResources.ValidationError("[R.swift] System image named 'square.and.arrow.up.circle' is used in storyboard 'ImageView', but couldn't be loaded.") } }
        if imageViewVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'imageViewVC' could not be loaded from storyboard 'ImageView' as 'ImageViewVC'.") }
      }
    }

    /// Storyboard `LaunchScreen`.
    struct launchScreen: RswiftResources.StoryboardReference, RswiftResources.InitialControllerContainer {
      typealias InitialController = UIKit.UIViewController

      let bundle: Foundation.Bundle

      let name = "LaunchScreen"
      func validate() throws {

      }
    }

    /// Storyboard `Main`.
    struct main: RswiftResources.StoryboardReference, RswiftResources.InitialControllerContainer {
      typealias InitialController = UIKit.UINavigationController

      let bundle: Foundation.Bundle

      let name = "Main"

      var uiComponentsNavigationVC: RswiftResources.StoryboardViewControllerIdentifier<UIComponentsNavigationVC> { .init(identifier: "UIComponentsNavigationVC", storyboard: name, bundle: bundle) }

      func validate() throws {
        if uiComponentsNavigationVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'uiComponentsNavigationVC' could not be loaded from storyboard 'Main' as 'UIComponentsNavigationVC'.") }
      }
    }

    /// Storyboard `MKMapView`.
    struct mkMapView: RswiftResources.StoryboardReference {
      let bundle: Foundation.Bundle

      let name = "MKMapView"

      var mapTabBarVC: RswiftResources.StoryboardViewControllerIdentifier<MapTabBarVC> { .init(identifier: "MapTabBarVC", storyboard: name, bundle: bundle) }
      var mkMapViewVC: RswiftResources.StoryboardViewControllerIdentifier<MKMapViewVC> { .init(identifier: "MKMapViewVC", storyboard: name, bundle: bundle) }
      var sevenWondersVC: RswiftResources.StoryboardViewControllerIdentifier<SevenWondersVC> { .init(identifier: "SevenWondersVC", storyboard: name, bundle: bundle) }

      func validate() throws {
        if mkMapViewVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'mkMapViewVC' could not be loaded from storyboard 'MKMapView' as 'MKMapViewVC'.") }
        if mapTabBarVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'mapTabBarVC' could not be loaded from storyboard 'MKMapView' as 'MapTabBarVC'.") }
        if sevenWondersVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'sevenWondersVC' could not be loaded from storyboard 'MKMapView' as 'SevenWondersVC'.") }
      }
    }

    /// Storyboard `OTTScreen`.
    struct ottScreen: RswiftResources.StoryboardReference {
      let bundle: Foundation.Bundle

      let name = "OTTScreen"

      var ottViewController: RswiftResources.StoryboardViewControllerIdentifier<OTTViewController> { .init(identifier: "OTTViewController", storyboard: name, bundle: bundle) }

      func validate() throws {
        if ottViewController() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'ottViewController' could not be loaded from storyboard 'OTTScreen' as 'OTTViewController'.") }
      }
    }

    /// Storyboard `ScrollView`.
    struct scrollView: RswiftResources.StoryboardReference {
      let bundle: Foundation.Bundle

      let name = "ScrollView"

      var scrollViewVC: RswiftResources.StoryboardViewControllerIdentifier<ScrollViewVC> { .init(identifier: "ScrollViewVC", storyboard: name, bundle: bundle) }

      func validate() throws {
        if scrollViewVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'scrollViewVC' could not be loaded from storyboard 'ScrollView' as 'ScrollViewVC'.") }
      }
    }

    /// Storyboard `SearchBar`.
    struct searchBar: RswiftResources.StoryboardReference {
      let bundle: Foundation.Bundle

      let name = "SearchBar"

      var searchBarVC: RswiftResources.StoryboardViewControllerIdentifier<SearchBarVC> { .init(identifier: "SearchBarVC", storyboard: name, bundle: bundle) }

      func validate() throws {
        if searchBarVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'searchBarVC' could not be loaded from storyboard 'SearchBar' as 'SearchBarVC'.") }
      }
    }

    /// Storyboard `StackView`.
    struct stackView: RswiftResources.StoryboardReference {
      let bundle: Foundation.Bundle

      let name = "StackView"

      var stackViewVC: RswiftResources.StoryboardViewControllerIdentifier<StackViewVC> { .init(identifier: "StackViewVC", storyboard: name, bundle: bundle) }

      func validate() throws {
        if UIKit.UIColor(named: "AccentColor", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'AccentColor' is used in storyboard 'StackView', but couldn't be loaded.") }
        if stackViewVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'stackViewVC' could not be loaded from storyboard 'StackView' as 'StackViewVC'.") }
      }
    }

    /// Storyboard `TableView`.
    struct tableView: RswiftResources.StoryboardReference {
      let bundle: Foundation.Bundle

      let name = "TableView"

      var addFriendVC: RswiftResources.StoryboardViewControllerIdentifier<AddFriendVC> { .init(identifier: "AddFriendVC", storyboard: name, bundle: bundle) }
      var friendsListVC: RswiftResources.StoryboardViewControllerIdentifier<FriendsListVC> { .init(identifier: "FriendsListVC", storyboard: name, bundle: bundle) }
      var tableContentVC: RswiftResources.StoryboardViewControllerIdentifier<TableContentVC> { .init(identifier: "TableContentVC", storyboard: name, bundle: bundle) }
      var tableViewVC: RswiftResources.StoryboardViewControllerIdentifier<TableViewVC> { .init(identifier: "TableViewVC", storyboard: name, bundle: bundle) }

      func validate() throws {
        if UIKit.UIImage(named: "defaultPerson", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'defaultPerson' is used in storyboard 'TableView', but couldn't be loaded.") }
        if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "plus") == nil { throw RswiftResources.ValidationError("[R.swift] System image named 'plus' is used in storyboard 'TableView', but couldn't be loaded.") } }
        if addFriendVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'addFriendVC' could not be loaded from storyboard 'TableView' as 'AddFriendVC'.") }
        if friendsListVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'friendsListVC' could not be loaded from storyboard 'TableView' as 'FriendsListVC'.") }
        if tableContentVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'tableContentVC' could not be loaded from storyboard 'TableView' as 'TableContentVC'.") }
        if tableViewVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'tableViewVC' could not be loaded from storyboard 'TableView' as 'TableViewVC'.") }
      }
    }

    /// Storyboard `Task1`.
    struct task1: RswiftResources.StoryboardReference {
      let bundle: Foundation.Bundle

      let name = "Task1"

      var authPageViewController: RswiftResources.StoryboardViewControllerIdentifier<AuthPageViewController> { .init(identifier: "AuthPageViewController", storyboard: name, bundle: bundle) }
      var loginViewController: RswiftResources.StoryboardViewControllerIdentifier<LoginViewController> { .init(identifier: "LoginViewController", storyboard: name, bundle: bundle) }
      var signUpViewController: RswiftResources.StoryboardViewControllerIdentifier<SignUpViewController> { .init(identifier: "SignUpViewController", storyboard: name, bundle: bundle) }
      var task1VC: RswiftResources.StoryboardViewControllerIdentifier<Task1VC> { .init(identifier: "Task1VC", storyboard: name, bundle: bundle) }

      func validate() throws {
        if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "camera.fill") == nil { throw RswiftResources.ValidationError("[R.swift] System image named 'camera.fill' is used in storyboard 'Task1', but couldn't be loaded.") } }
        if UIKit.UIImage(named: "defaultPerson", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'defaultPerson' is used in storyboard 'Task1', but couldn't be loaded.") }
        if authPageViewController() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'authPageViewController' could not be loaded from storyboard 'Task1' as 'AuthPageViewController'.") }
        if loginViewController() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'loginViewController' could not be loaded from storyboard 'Task1' as 'LoginViewController'.") }
        if signUpViewController() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'signUpViewController' could not be loaded from storyboard 'Task1' as 'SignUpViewController'.") }
        if task1VC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'task1VC' could not be loaded from storyboard 'Task1' as 'Task1VC'.") }
      }
    }

    /// Storyboard `UIButton`.
    struct uiButton: RswiftResources.StoryboardReference {
      let bundle: Foundation.Bundle

      let name = "UIButton"

      var uiButtonVC: RswiftResources.StoryboardViewControllerIdentifier<UIButtonVC> { .init(identifier: "UIButtonVC", storyboard: name, bundle: bundle) }

      func validate() throws {
        if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "arrowshape.turn.up.forward.circle.fill") == nil { throw RswiftResources.ValidationError("[R.swift] System image named 'arrowshape.turn.up.forward.circle.fill' is used in storyboard 'UIButton', but couldn't be loaded.") } }
        if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "wind") == nil { throw RswiftResources.ValidationError("[R.swift] System image named 'wind' is used in storyboard 'UIButton', but couldn't be loaded.") } }
        if uiButtonVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'uiButtonVC' could not be loaded from storyboard 'UIButton' as 'UIButtonVC'.") }
      }
    }

    /// Storyboard `UIDatePicker`.
    struct uiDatePicker: RswiftResources.StoryboardReference {
      let bundle: Foundation.Bundle

      let name = "UIDatePicker"

      var uiDatePickerVC: RswiftResources.StoryboardViewControllerIdentifier<UIDatePickerVC> { .init(identifier: "UIDatePickerVC", storyboard: name, bundle: bundle) }

      func validate() throws {
        if uiDatePickerVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'uiDatePickerVC' could not be loaded from storyboard 'UIDatePicker' as 'UIDatePickerVC'.") }
      }
    }

    /// Storyboard `UILabel`.
    struct uiLabel: RswiftResources.StoryboardReference {
      let bundle: Foundation.Bundle

      let name = "UILabel"

      var uiLabelVC: RswiftResources.StoryboardViewControllerIdentifier<UILabelVC> { .init(identifier: "UILabelVC", storyboard: name, bundle: bundle) }

      func validate() throws {
        if uiLabelVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'uiLabelVC' could not be loaded from storyboard 'UILabel' as 'UILabelVC'.") }
      }
    }

    /// Storyboard `UINavigation`.
    struct uiNavigation: RswiftResources.StoryboardReference {
      let bundle: Foundation.Bundle

      let name = "UINavigation"

      var practiceNavigationRootVC: RswiftResources.StoryboardViewControllerIdentifier<PracticeNavigationRootVC> { .init(identifier: "PracticeNavigationRootVC", storyboard: name, bundle: bundle) }
      var secondVC: RswiftResources.StoryboardViewControllerIdentifier<SecondVC> { .init(identifier: "SecondVC", storyboard: name, bundle: bundle) }
      var thirdVC: RswiftResources.StoryboardViewControllerIdentifier<FourthVC> { .init(identifier: "ThirdVC", storyboard: name, bundle: bundle) }
      var uiNavigationVC: RswiftResources.StoryboardViewControllerIdentifier<UINavigationVC> { .init(identifier: "UINavigationVC", storyboard: name, bundle: bundle) }
      var vc1: RswiftResources.StoryboardViewControllerIdentifier<VC1> { .init(identifier: "VC1", storyboard: name, bundle: bundle) }
      var vc2: RswiftResources.StoryboardViewControllerIdentifier<VC2> { .init(identifier: "VC2", storyboard: name, bundle: bundle) }
      var vc3: RswiftResources.StoryboardViewControllerIdentifier<VC3> { .init(identifier: "VC3", storyboard: name, bundle: bundle) }
      var vc4: RswiftResources.StoryboardViewControllerIdentifier<VC4> { .init(identifier: "VC4", storyboard: name, bundle: bundle) }
      var vc5: RswiftResources.StoryboardViewControllerIdentifier<VC5> { .init(identifier: "VC5", storyboard: name, bundle: bundle) }

      func validate() throws {
        if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "chevron.right") == nil { throw RswiftResources.ValidationError("[R.swift] System image named 'chevron.right' is used in storyboard 'UINavigation', but couldn't be loaded.") } }
        if practiceNavigationRootVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'practiceNavigationRootVC' could not be loaded from storyboard 'UINavigation' as 'PracticeNavigationRootVC'.") }
        if secondVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'secondVC' could not be loaded from storyboard 'UINavigation' as 'SecondVC'.") }
        if thirdVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'thirdVC' could not be loaded from storyboard 'UINavigation' as 'FourthVC'.") }
        if uiNavigationVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'uiNavigationVC' could not be loaded from storyboard 'UINavigation' as 'UINavigationVC'.") }
        if vc1() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'vc1' could not be loaded from storyboard 'UINavigation' as 'VC1'.") }
        if vc2() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'vc2' could not be loaded from storyboard 'UINavigation' as 'VC2'.") }
        if vc3() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'vc3' could not be loaded from storyboard 'UINavigation' as 'VC3'.") }
        if vc4() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'vc4' could not be loaded from storyboard 'UINavigation' as 'VC4'.") }
        if vc5() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'vc5' could not be loaded from storyboard 'UINavigation' as 'VC5'.") }
      }
    }

    /// Storyboard `UIPageViewController`.
    struct uiPageViewController: RswiftResources.StoryboardReference, RswiftResources.InitialControllerContainer {
      typealias InitialController = ContainerViewController

      let bundle: Foundation.Bundle

      let name = "UIPageViewController"

      var containerViewController: RswiftResources.StoryboardViewControllerIdentifier<ContainerViewController> { .init(identifier: "ContainerViewController", storyboard: name, bundle: bundle) }
      var mainPageViewController: RswiftResources.StoryboardViewControllerIdentifier<MainPageViewController> { .init(identifier: "MainPageViewController", storyboard: name, bundle: bundle) }
      var pinkViewController: RswiftResources.StoryboardViewControllerIdentifier<PinkViewController> { .init(identifier: "PinkViewController", storyboard: name, bundle: bundle) }
      var yellowViewController: RswiftResources.StoryboardViewControllerIdentifier<YellowViewController> { .init(identifier: "YellowViewController", storyboard: name, bundle: bundle) }

      func validate() throws {
        if containerViewController() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'containerViewController' could not be loaded from storyboard 'UIPageViewController' as 'ContainerViewController'.") }
        if mainPageViewController() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'mainPageViewController' could not be loaded from storyboard 'UIPageViewController' as 'MainPageViewController'.") }
        if pinkViewController() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'pinkViewController' could not be loaded from storyboard 'UIPageViewController' as 'PinkViewController'.") }
        if yellowViewController() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'yellowViewController' could not be loaded from storyboard 'UIPageViewController' as 'YellowViewController'.") }
      }
    }

    /// Storyboard `UIPickerView`.
    struct uiPickerView: RswiftResources.StoryboardReference {
      let bundle: Foundation.Bundle

      let name = "UIPickerView"

      var uiPickerViewVC: RswiftResources.StoryboardViewControllerIdentifier<UIPickerViewVC> { .init(identifier: "UIPickerViewVC", storyboard: name, bundle: bundle) }

      func validate() throws {
        if UIKit.UIImage(named: "locker", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'locker' is used in storyboard 'UIPickerView', but couldn't be loaded.") }
        if uiPickerViewVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'uiPickerViewVC' could not be loaded from storyboard 'UIPickerView' as 'UIPickerViewVC'.") }
      }
    }

    /// Storyboard `UIProgressView`.
    struct uiProgressView: RswiftResources.StoryboardReference {
      let bundle: Foundation.Bundle

      let name = "UIProgressView"

      var uiProgressViewVC: RswiftResources.StoryboardViewControllerIdentifier<UIProgressViewVC> { .init(identifier: "UIProgressViewVC", storyboard: name, bundle: bundle) }

      func validate() throws {
        if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "square.and.arrow.down") == nil { throw RswiftResources.ValidationError("[R.swift] System image named 'square.and.arrow.down' is used in storyboard 'UIProgressView', but couldn't be loaded.") } }
        if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "square.and.arrow.up.circle.fill") == nil { throw RswiftResources.ValidationError("[R.swift] System image named 'square.and.arrow.up.circle.fill' is used in storyboard 'UIProgressView', but couldn't be loaded.") } }
        if uiProgressViewVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'uiProgressViewVC' could not be loaded from storyboard 'UIProgressView' as 'UIProgressViewVC'.") }
      }
    }

    /// Storyboard `UISegmentedControl`.
    struct uiSegmentedControl: RswiftResources.StoryboardReference {
      let bundle: Foundation.Bundle

      let name = "UISegmentedControl"

      var uiSegmentedControlVC: RswiftResources.StoryboardViewControllerIdentifier<UISegmentedControlVC> { .init(identifier: "UISegmentedControlVC", storyboard: name, bundle: bundle) }

      func validate() throws {
        if uiSegmentedControlVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'uiSegmentedControlVC' could not be loaded from storyboard 'UISegmentedControl' as 'UISegmentedControlVC'.") }
      }
    }

    /// Storyboard `UISlider`.
    struct uiSlider: RswiftResources.StoryboardReference {
      let bundle: Foundation.Bundle

      let name = "UISlider"

      var uiSliderVC: RswiftResources.StoryboardViewControllerIdentifier<UISliderVC> { .init(identifier: "UISliderVC", storyboard: name, bundle: bundle) }

      func validate() throws {
        if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "pencil") == nil { throw RswiftResources.ValidationError("[R.swift] System image named 'pencil' is used in storyboard 'UISlider', but couldn't be loaded.") } }
        if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "pencil.line") == nil { throw RswiftResources.ValidationError("[R.swift] System image named 'pencil.line' is used in storyboard 'UISlider', but couldn't be loaded.") } }
        if uiSliderVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'uiSliderVC' could not be loaded from storyboard 'UISlider' as 'UISliderVC'.") }
      }
    }

    /// Storyboard `UIStepper`.
    struct uiStepper: RswiftResources.StoryboardReference {
      let bundle: Foundation.Bundle

      let name = "UIStepper"

      var uiStepperVC: RswiftResources.StoryboardViewControllerIdentifier<UIStepperVC> { .init(identifier: "UIStepperVC", storyboard: name, bundle: bundle) }

      func validate() throws {
        if uiStepperVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'uiStepperVC' could not be loaded from storyboard 'UIStepper' as 'UIStepperVC'.") }
      }
    }

    /// Storyboard `UISwitch`.
    struct uiSwitch: RswiftResources.StoryboardReference {
      let bundle: Foundation.Bundle

      let name = "UISwitch"

      var uiSwitchVC: RswiftResources.StoryboardViewControllerIdentifier<UISwitchVC> { .init(identifier: "UISwitchVC", storyboard: name, bundle: bundle) }

      func validate() throws {
        if uiSwitchVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'uiSwitchVC' could not be loaded from storyboard 'UISwitch' as 'UISwitchVC'.") }
      }
    }

    /// Storyboard `UITabBar`.
    struct uiTabBar: RswiftResources.StoryboardReference {
      let bundle: Foundation.Bundle

      let name = "UITabBar"

      var uiTabBarVC: RswiftResources.StoryboardViewControllerIdentifier<UITabBarVC> { .init(identifier: "UITabBarVC", storyboard: name, bundle: bundle) }

      func validate() throws {
        if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "homekit") == nil { throw RswiftResources.ValidationError("[R.swift] System image named 'homekit' is used in storyboard 'UITabBar', but couldn't be loaded.") } }
        if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "person.fill") == nil { throw RswiftResources.ValidationError("[R.swift] System image named 'person.fill' is used in storyboard 'UITabBar', but couldn't be loaded.") } }
        if uiTabBarVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'uiTabBarVC' could not be loaded from storyboard 'UITabBar' as 'UITabBarVC'.") }
      }
    }

    /// Storyboard `UITextField`.
    struct uiTextField: RswiftResources.StoryboardReference {
      let bundle: Foundation.Bundle

      let name = "UITextField"

      var uiTextFieldVC: RswiftResources.StoryboardViewControllerIdentifier<UITextFieldVC> { .init(identifier: "UITextFieldVC", storyboard: name, bundle: bundle) }

      func validate() throws {
        if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "bookmark.fill") == nil { throw RswiftResources.ValidationError("[R.swift] System image named 'bookmark.fill' is used in storyboard 'UITextField', but couldn't be loaded.") } }
        if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "eye.slash.fill") == nil { throw RswiftResources.ValidationError("[R.swift] System image named 'eye.slash.fill' is used in storyboard 'UITextField', but couldn't be loaded.") } }
        if uiTextFieldVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'uiTextFieldVC' could not be loaded from storyboard 'UITextField' as 'UITextFieldVC'.") }
      }
    }

    /// Storyboard `UITextView`.
    struct uiTextView: RswiftResources.StoryboardReference {
      let bundle: Foundation.Bundle

      let name = "UITextView"

      var uiTextViewVC: RswiftResources.StoryboardViewControllerIdentifier<UITextViewVC> { .init(identifier: "UITextViewVC", storyboard: name, bundle: bundle) }

      func validate() throws {
        if uiTextViewVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'uiTextViewVC' could not be loaded from storyboard 'UITextView' as 'UITextViewVC'.") }
      }
    }

    /// Storyboard `UIToolBar`.
    struct uiToolBar: RswiftResources.StoryboardReference {
      let bundle: Foundation.Bundle

      let name = "UIToolBar"

      var uiToolBarVC: RswiftResources.StoryboardViewControllerIdentifier<UIToolBarVC> { .init(identifier: "UIToolBarVC", storyboard: name, bundle: bundle) }

      func validate() throws {
        if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "chevron.left") == nil { throw RswiftResources.ValidationError("[R.swift] System image named 'chevron.left' is used in storyboard 'UIToolBar', but couldn't be loaded.") } }
        if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "chevron.right") == nil { throw RswiftResources.ValidationError("[R.swift] System image named 'chevron.right' is used in storyboard 'UIToolBar', but couldn't be loaded.") } }
        if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "play.fill") == nil { throw RswiftResources.ValidationError("[R.swift] System image named 'play.fill' is used in storyboard 'UIToolBar', but couldn't be loaded.") } }
        if uiToolBarVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'uiToolBarVC' could not be loaded from storyboard 'UIToolBar' as 'UIToolBarVC'.") }
      }
    }

    /// Storyboard `WebServices`.
    struct webServices: RswiftResources.StoryboardReference {
      let bundle: Foundation.Bundle

      let name = "WebServices"

      var exploreLoginVC: RswiftResources.StoryboardViewControllerIdentifier<ExploreLoginVC> { .init(identifier: "ExploreLoginVC", storyboard: name, bundle: bundle) }
      var exploreSignUpVC: RswiftResources.StoryboardViewControllerIdentifier<ExploreSignUpVC> { .init(identifier: "ExploreSignUpVC", storyboard: name, bundle: bundle) }
      var exploreUsersVC: RswiftResources.StoryboardViewControllerIdentifier<ExploreUsersVC> { .init(identifier: "ExploreUsersVC", storyboard: name, bundle: bundle) }
      var productListingVC: RswiftResources.StoryboardViewControllerIdentifier<ProductListingVC> { .init(identifier: "ProductListingVC", storyboard: name, bundle: bundle) }
      var rssFeedVC: RswiftResources.StoryboardViewControllerIdentifier<RSSFeedVC> { .init(identifier: "RSSFeedVC", storyboard: name, bundle: bundle) }
      var webServicesVC: RswiftResources.StoryboardViewControllerIdentifier<WebServicesVC> { .init(identifier: "WebServicesVC", storyboard: name, bundle: bundle) }

      func validate() throws {
        if UIKit.UIImage(named: "gps", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'gps' is used in storyboard 'WebServices', but couldn't be loaded.") }
        if exploreLoginVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'exploreLoginVC' could not be loaded from storyboard 'WebServices' as 'ExploreLoginVC'.") }
        if exploreSignUpVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'exploreSignUpVC' could not be loaded from storyboard 'WebServices' as 'ExploreSignUpVC'.") }
        if exploreUsersVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'exploreUsersVC' could not be loaded from storyboard 'WebServices' as 'ExploreUsersVC'.") }
        if productListingVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'productListingVC' could not be loaded from storyboard 'WebServices' as 'ProductListingVC'.") }
        if rssFeedVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'rssFeedVC' could not be loaded from storyboard 'WebServices' as 'RSSFeedVC'.") }
        if webServicesVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'webServicesVC' could not be loaded from storyboard 'WebServices' as 'WebServicesVC'.") }
      }
    }

    /// Storyboard `WKWebView`.
    struct wkWebView: RswiftResources.StoryboardReference {
      let bundle: Foundation.Bundle

      let name = "WKWebView"

      var pdfViewerVC: RswiftResources.StoryboardViewControllerIdentifier<PdfViewerVC> { .init(identifier: "PdfViewerVC", storyboard: name, bundle: bundle) }
      var wkWebVC: RswiftResources.StoryboardViewControllerIdentifier<WKWebVC> { .init(identifier: "WKWebVC", storyboard: name, bundle: bundle) }
      var wkWebViewTabBarVC: RswiftResources.StoryboardViewControllerIdentifier<WKWebViewTabBarVC> { .init(identifier: "WKWebViewTabBarVC", storyboard: name, bundle: bundle) }

      func validate() throws {
        if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "book.fill") == nil { throw RswiftResources.ValidationError("[R.swift] System image named 'book.fill' is used in storyboard 'WKWebView', but couldn't be loaded.") } }
        if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "magnifyingglass") == nil { throw RswiftResources.ValidationError("[R.swift] System image named 'magnifyingglass' is used in storyboard 'WKWebView', but couldn't be loaded.") } }
        if pdfViewerVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'pdfViewerVC' could not be loaded from storyboard 'WKWebView' as 'PdfViewerVC'.") }
        if wkWebVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'wkWebVC' could not be loaded from storyboard 'WKWebView' as 'WKWebVC'.") }
        if wkWebViewTabBarVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'wkWebViewTabBarVC' could not be loaded from storyboard 'WKWebView' as 'WKWebViewTabBarVC'.") }
      }
    }
  }
}